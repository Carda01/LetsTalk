from pyspark.sql.functions import col, lit, regexp_replace, collect_list, concat, concat_ws
from pyspark.sql.types import StringType

from lib.pt_utils import *
from lib.IncrementalLoader import IncrementalLoader
from lib.PineconeManager import PineconeManager, prepare_data

is_gcs_enabled = os.getenv('IS_GCS_ENABLED')
pinecone_key = os.getenv('PINECONE_KEY')
index_name = "letstalkvector"
namespace = "letstalk-ns"

pi = PineconeManager(index_name, namespace, pinecone_key)

if is_gcs_enabled.lower() == 'true':
    is_gcs_enabled = True
else:
    is_gcs_enabled = False

spark, base_path = get_spark_and_path(is_gcs_enabled)
sc = spark.sparkContext
sc.addPyFile("/script/lib.zip")

trusted_path = get_trusted_path(base_path)


logging.info(f"Processing movies")
tmdb_path = os.path.join(trusted_path, 'delta_tmdb')
movie_loader = IncrementalLoader(spark, trusted_path, 'delta_tmdb/movie', is_gcs_enabled)
movie = movie_loader.get_new_data()
if movie.isEmpty():
    logging.info("No movies found")
else:
    movie_genre_loader = IncrementalLoader(spark, trusted_path, 'delta_tmdb/movie_genre', is_gcs_enabled)
    movie_genre = movie_genre_loader.get_new_data()
    genre = spark.read.format("delta").load(os.path.join(tmdb_path, "genre"))

    movie_genres_compacted = movie_genre.join(genre, on=(movie_genre.genre_id == genre.genre_id)).groupby("film_id").agg(concat_ws(
        ", ",
        collect_list("genre")
    ).alias("genres") ).withColumnRenamed("film_id", "join_film_id")

    enriched_movie = movie.join(movie_genres_compacted, on=(movie.film_id == movie_genres_compacted.join_film_id)) \
        .drop("original_title", "popularity", "ingestion_time", "join_film_id") \
        .withColumn("text_to_embed", concat(col('title'), lit(" "), col('overview'), lit(" "), col('genres'))) \
        .withColumn("film_id", col("film_id").cast(StringType()))

    pc_data, pc_reg = prepare_data(enriched_movie, "film_id", "ingestion_time", ["text_to_embed"])

    pinecone_loader = pi.get_pinecone_loader()
    pc_data.rdd.foreachPartition(pinecone_loader)

    movie_loader.update_control_table()
    movie_genre_loader.update_control_table()


spark.stop()
logging.info("Data was uploaded to pinecone")

